# -*- mode: Perl6;-*-
use v6;
use experimental :cached;

use Crust::Request;
use JSON::Fast;
use Net::Curl::NativeCall;

constant CaptchaSecret = %*ENV<SIXBUG_CAPTCHA_SECRET>;
constant NotFound = [ ~404, [], [ 'Not Found' ] ];
# constant RTURL = 'https://rt.perl.org/REST/1.0/';
# constant RTLOGIN = "user=perl6bug\@gmail.com\&pass={%*ENV<SIXBUG_RT_PW>}";
constant RTURL = 'https://demo.bestpractical.com/REST/1.0/';
constant RTLOGIN = 'user=guest&pass=guest';

my %txt-type =
  :css<text/css>,
  :js<application/javascript>,
  :json<application/json>,
  :svg<image/svg+xml>;
my regex TXT { <{ %txt-type.keys }> }

my %bin-type =
  :eot<application/vnd.ms-fontobject>,
  :otf<application/x-font-otf>,
  :ttf<application/x-font-ttf>,
  :woff<application/x-font-woff>,
  :woff2<application/x-font-woff>;
my regex BIN { <{ %bin-type.keys }> }

sub print-curl-err($res) {
  warn sprintf("curl_easy_perform failed: %s\n", curl_easy_strerror($res))
}

sub check-captcha($response, $ip?) {
  my Bool $is-human = False;
  with curl_easy_init() {
    my Str $body;
    my $post = "secret={CaptchaSecret}\&response=$response"
               ~ ($ip ?? "\&remoteip=$ip" !! "");
    curl_easy_setopt($_, CURLOPT_URL, 'https://www.google.com/recaptcha/api/siteverify');
    curl_easy_setopt($_, CURLOPT_COPYPOSTFIELDS, $post);
    curl_easy_setopt($_, CURLOPT_WRITEDATA, $body);
    my $res = curl_easy_perform($_);
    if $res != CURLE_OK { print-curl-err($res) } else {
      with from-json($body) { $_<success> ?? ($is-human = True) !! warn $_<error-codes> }
    }
    curl_easy_cleanup($_)
  } else { warn "curl failed to initialize" }
  return $is-human
}

sub short-day(Int $day where * ~~ 1..7) {
  given $day {
    when 1 { 'Mon' }
    when 2 { 'Tue' }
    when 3 { 'Wed' }
    when 4 { 'Thu' }
    when 5 { 'Fri' }
    when 6 { 'Sat' }
    when 7 { 'Sun' }
  }
}

sub short-month(Int $month where * ~~ 1..12) {
  given $month {
    when 1  { 'Jan' }
    when 2  { 'Feb' }
    when 3  { 'Mar' }
    when 4  { 'Apr' }
    when 5  { 'May' }
    when 6  { 'Jun' }
    when 7  { 'Jul' }
    when 8  { 'Aug' }
    when 9  { 'Sep' }
    when 10 { 'Oct' }
    when 11 { 'Nov' }
    when 12 { 'Dec' }
  }
}

class Ticket {
  has Str $!response;
  has Str $!content;

  has Int $.id;
  has Str $.subject;
  has Str $.text;
  has Str $.cc;
  has Str $.created;

  multi submethod BUILD(Str :$!subject!, Str :$!text!, Str :$!cc?) {
    with curl_easy_init() {
      self.fill-content($!subject, $!cc, $!text.lines.join("\n "));

      curl_easy_setopt($_, CURLOPT_URL, "{RTURL}ticket/new");
      curl_easy_setopt($_, CURLOPT_COPYPOSTFIELDS, "{RTLOGIN}\&content=$!content");
      curl_easy_setopt($_, CURLOPT_WRITEDATA, $!response);

      my $curl-code = curl_easy_perform($_);
      if $curl-code != CURLE_OK { print-curl-err($curl-code) } else {
        say $!response if %*ENV<SIXBUG_DEBUG>;
      }

      $!id = +($!response.match(/Ticket\s(\d+)\screated/)[0]);

      $!created = DateTime.now(formatter => {
        "{short-day($_.day-of-week)} {short-month($_.month)} {$_.day} " ~
        "{$_.hour}:{$_.minute}:{$_.second.Int} {$_.year}"
      }).Str;

      curl_easy_cleanup($_)
    } else { warn "curl failed to initialize" }
  }
  multi submethod BUILD(Int :$!id!, Str :$!subject!, Str :$!created!) {}

  method fill-content(Str $subject, $cc, $text) {
    $!content = qq:to/TICKET/;
    id: ticket/new
    Queue: General
    Requestor: perl6bug@gmail.com
    Subject: $subject
    Cc: $cc
    Text: $text
    TICKET
  }

  method Hash { return { id => $!id, subject => $!subject, created => $!created } }
}

class RT {
  has Instant $.updated;
  has Ticket:D @!tickets;
  has Str $!ticket-json;

  sub refresh-json(@tickets) is cached { to-json(@tickets».Hash) }

  submethod BUILD() { self.get-tickets() }

  method get-tickets {
    with curl_easy_init() {
      my Str $raw;
      curl_easy_setopt($_, CURLOPT_URL, "{RTURL}search/ticket?query=Queue='perl6'"
                                        ~ "\&format=s\&fields=id,subject,created");
      curl_easy_setopt($_, CURLOPT_COPYPOSTFIELDS, RTLOGIN);
      curl_easy_setopt($_, CURLOPT_WRITEDATA, $raw);
      my $curl-code = curl_easy_perform($_);
      if $curl-code != CURLE_OK { print-curl-err($curl-code) } else {
        my List @lines = ($raw.lines[3..*]».split("\t")).grep(* == 3);
        for @lines -> @ ($i, $s, $c) {
          @!tickets.push(Ticket.new :id(+$i) :subject($s) :created($c))
        }
      }
      curl_easy_cleanup($_)
    } else { warn "curl failed to initialize" }
    $!ticket-json = refresh-json(@!tickets);
    $!updated = now;
  }

  method tickets() returns Str { self.cached-tickets(now) }
  multi method cached-tickets( Instant $ where {
    $_ < ($!updated + Duration.new(15 * 60))
  } ) { return $!ticket-json }
  multi method cached-tickets( Instant $ ) {
    start { self.get-tickets() }
    return $!ticket-json
  }

  method add(Ticket:D $ticket) {
    @!tickets.unshift($ticket);
    $!ticket-json = refresh-json(@!tickets);
  }

}

sub ip($req) {
  my $h = $req.headers;
     $h.header('HTTP_CLIENT_IP')
  // $h.header('X-Forwarded-For')
  // $h.header('HTTP_X_FORWARDED_FOR')
  // $h.header('REMOTE_ADDR')
}


sub app(%env) {
  state RT $RT .= new;
  my $req = Crust::Request.new(%env);
  given $req.path-info {
    when '/' {
      [ 200, [ 'Content-Type' => 'text/html' ],
             [ slurp('public/index.html') ] ]
    }
    when '/tickets' {
      [ 200, [ 'Content-Type' => 'application/json' ],
             [ $RT.tickets() ] ]
    }
    when '/submit' {
      if check-captcha($req.parameters<g-recaptcha-response>, ip($req)) {
        my Ticket $ticket .= new(
          subject => $req.parameters<subject>,
          text    => $req.parameters<body>,
          cc      => $req.parameters<email>
        );
        $RT.add($ticket);
        [ 303, [ 'Location' => 'https://rt.perl.org/Ticket/Display.html?id='
                               ~ $ticket.id ],
               [ 'Redirected to ticket #' ~ $ticket.id ] ]
      } else {
        [ 401, [],
               [ 'Unauthorized: did not pass recaptcha' ] ]
      }
    }
    when m!\/(public|vendor)\/([\w|\.|\-]+)\.(<TXT>)! {
      my $filepath = "$0/$1.$2";
      return NotFound unless $filepath.IO.f;
      [ 200, [ 'Content-Type' => %txt-type{$2} ],
             [ $filepath.IO.slurp ] ]
    }
    when m!\/(public|vendor)\/([\w|\.|\-]+)\.(<BIN>)! {
      my $filepath = "$0/$1.$2";
      return NotFound unless $filepath.IO.f;
      [ 200, [ 'Content-Type' => %bin-type{$2} ],
             [ $filepath.IO.slurp :bin ] ]
    }
    default { NotFound }
  }
}
